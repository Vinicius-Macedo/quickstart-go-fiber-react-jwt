// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package postgresRepo

import (
	"context"
	"database/sql"
)

const checkUserExistsByEmail = `-- name: CheckUserExistsByEmail :one
SELECT id, name, username, email, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) CheckUserExistsByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistsByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const checkUserExistsByUsername = `-- name: CheckUserExistsByUsername :one
SELECT id, name, username, email, password, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) CheckUserExistsByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistsByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, username, email, password) VALUES ($1, $2, $3, $4) RETURNING id, name, username, email, password, created_at, updated_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
DELETE FROM users WHERE email = $1
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByEmail, email)
	return err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUsername, username)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id, u.name, u.username, u.email, u.password, u.created_at, u.updated_at, i.image_url
FROM users u
LEFT JOIN images i ON u.email = i.user_email
WHERE u.email = $1
`

type GetUserByEmailRow struct {
	ID        int32          `json:"id"`
	Name      string         `json:"name"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	ImageUrl  sql.NullString `json:"image_url"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
	)
	return i, err
}

const insertImageOnUserByEmail = `-- name: InsertImageOnUserByEmail :one
INSERT INTO images (user_email, image_url) VALUES ($1, $2) RETURNING id, user_email, image_url, uploaded_at
`

type InsertImageOnUserByEmailParams struct {
	UserEmail string `json:"user_email"`
	ImageUrl  string `json:"image_url"`
}

func (q *Queries) InsertImageOnUserByEmail(ctx context.Context, arg InsertImageOnUserByEmailParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, insertImageOnUserByEmail, arg.UserEmail, arg.ImageUrl)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.ImageUrl,
		&i.UploadedAt,
	)
	return i, err
}

const updateUserPasswordByEmail = `-- name: UpdateUserPasswordByEmail :exec
UPDATE users SET password = $2 WHERE email = $1
`

type UpdateUserPasswordByEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPasswordByEmail(ctx context.Context, arg UpdateUserPasswordByEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordByEmail, arg.Email, arg.Password)
	return err
}
